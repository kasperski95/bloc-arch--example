{"version":3,"sources":["blocs/led/LedEvent.ts","blocs/led/LedState.ts","blocs/led/LedBloc.ts","blocs/setup-blocs.ts","components/Led.tsx","components/LedClock.tsx","screens/Home.tsx","index.tsx"],"names":["LedEvent","BlocEvent","Toggle","TurnOff","LedState","BlocState","Off","On","LedBloc","label","nextLedBloc","LedStates","event","LedEvents","getState","Promise","resolve","setTimeout","dispatch","Bloc","setupBlocs","led0","led1","led2","led3","BlocProvider","useBloc","useWeakBloc","Led","props","onClick","ledBloc","bloc","renderer","useBlocRenderProp","state","Container","isOn","Label","styled","div","LedClock","ledBloc0Getter","ledBloc1Getter","ledBloc2Getter","ledBloc3Getter","Button","forEach","ledBlocGetter","Home","ledBloc3","ledBloc2","ledBloc1","ledBloc0","Wrapper","Title","LedWrapper","h1","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+eAEsBA,EAAtB,4HAAuCC,aAE1BC,EAAb,4HAA4BD,aAEfE,EAAb,4HAA6BF,aCJPG,EAAtB,4HAAuCC,aAE1BC,EAAb,4HAAyBF,GAEZG,EAAb,4HAAwBH,G,yCCFXI,EAAb,kDACE,WAAmBC,EAAuBC,GAAwB,IAAD,8BAC/D,cAAM,IAAIC,IADOF,QAA8C,EAAvBC,cAAuB,EADnE,mDAKE,SAAuBE,GAA4B,IAAD,6HAC5CA,aAAiBC,GAD2B,sBAE1C,EAAKC,qBAAsBH,GAFe,gBAG5C,OAH4C,SAGtC,IAAIA,EAHkC,8BAK5C,OAL4C,SAKtC,IAAIA,EALkC,oCAMtC,IAAII,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,SANP,QAO5C,YAAKN,mBAAL,SAAkBQ,SAAS,IAAIL,GAPa,qCASrCD,aAAiBC,GAToB,iBAU9C,OAV8C,UAUxC,IAAIF,EAVoC,kDALpD,GAA6BQ,Q,ECDyBC,qBAAW,CAC/DC,KAAM,SAACX,GAAD,OAA0B,IAAIF,EAAQ,IAAKE,IACjDY,KAAM,SAACZ,GAAD,OAA0B,IAAIF,EAAQ,IAAKE,IACjDa,KAAM,SAACb,GAAD,OAA0B,IAAIF,EAAQ,IAAKE,IACjDc,KAAM,kBAAM,IAAIhB,EAAQ,QAJXiB,E,EAAAA,aAAcC,E,EAAAA,QAASC,E,EAAAA,Y,6BCE/B,SAASC,EAAIC,GAClB,OACE,qBACEC,QAAS,WACPD,EAAME,QAAQb,SAAS,IAAIL,EAAUX,SAFzC,SAKE,cAAC,cAAD,CACE8B,KAAMH,EAAME,QACZE,SAAUC,6BACR,SAACC,GACC,OAAIA,aAAiBxB,EAAUJ,GAE3B,qCACE,cAAC6B,EAAD,CAAWC,MAAM,IACjB,cAACC,EAAD,UAAQT,EAAME,QAAQtB,WAGjB0B,aAAiBxB,EAAUL,IAElC,qCACE,cAAC8B,EAAD,CAAWC,MAAM,IACjB,cAACC,EAAD,UAAQT,EAAME,QAAQtB,WAIrB,cAAC2B,EAAD,CAAWC,MAAM,MAE1B,CAACR,EAAME,cAOjB,I,EAAMK,EAAYG,IAAOC,IAAV,+IAGC,qBAAGH,KAEX,4EACA,mEAMFC,EAAQC,IAAOC,IAAV,yFC/CJ,SAASC,IACd,IAAMC,EAAiBf,EAAY,QAC7BgB,EAAiBhB,EAAY,QAC7BiB,EAAiBjB,EAAY,QAC7BkB,EAAiBlB,EAAY,QAEnC,OACE,cAACmB,EAAD,CACEhB,QAAS,WACN,CACCY,EACAC,EACAC,EACAC,GACAE,SAAQ,SAACC,GAAmB,IAAD,EACd,QAAb,EAAAA,WAAA,SAAiB9B,SAAS,IAAIL,EAAUV,aAR9C,mBAiBJ,I,MAAM2C,EAASP,IAAOC,IAAV,6ICvBL,SAASS,IACd,IAAMC,EAAWxB,EAAQ,OAARA,GACXyB,EAAWzB,EAAQ,OAARA,CAAgBwB,GAC3BE,EAAW1B,EAAQ,OAARA,CAAgByB,GAC3BE,EAAW3B,EAAQ,OAARA,CAAgB0B,GAEjC,OACE,eAACE,EAAD,WACE,cAACC,EAAD,gCACA,eAACC,EAAD,WACE,cAAC5B,EAAD,CAAKG,QAASsB,IACd,cAACzB,EAAD,CAAKG,QAASqB,IACd,cAACxB,EAAD,CAAKG,QAASoB,IACd,cAACvB,EAAD,CAAKG,QAASmB,OAEhB,eAACM,EAAD,WACE,cAAC5B,EAAD,CAAKG,QAASmB,IACd,cAACtB,EAAD,CAAKG,QAASoB,IACd,cAACvB,EAAD,CAAKG,QAASqB,IACd,cAACxB,EAAD,CAAKG,QAASsB,OAEhB,cAACZ,EAAD,OAKN,IAAMa,EAAUf,IAAOC,IAAV,iGAMPe,EAAQhB,IAAOkB,GAAV,6CAILD,EAAajB,IAAOC,IAAV,sEClChBkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACnC,EAAD,UACE,cAACwB,EAAD,QAGJY,SAASC,eAAe,W","file":"static/js/main.da7ede54.chunk.js","sourcesContent":["import { BlocEvent } from '@bloc-arch/core'\n\nexport abstract class LedEvent extends BlocEvent {}\n\nexport class Toggle extends BlocEvent {}\n\nexport class TurnOff extends BlocEvent {}\n","import { BlocState } from '@bloc-arch/core'\n\nexport abstract class LedState extends BlocState {}\n\nexport class Off extends LedState {}\n\nexport class On extends LedState {}\n","import { Bloc } from '@bloc-arch/core'\nimport * as LedEvents from './LedEvent'\nimport * as LedStates from './LedState'\n\nexport class LedBloc extends Bloc<LedEvents.LedEvent, LedStates.LedState> {\n  constructor(public label: String, private nextLedBloc?: LedBloc) {\n    super(new LedStates.Off())\n  }\n\n  async *mapEventToState(event: LedEvents.LedEvent) {\n    if (event instanceof LedEvents.Toggle) {\n      if (this.getState() instanceof LedStates.Off) {\n        yield new LedStates.On()\n      } else {\n        yield new LedStates.Off()\n        await new Promise((resolve) => setTimeout(resolve, 100))\n        this.nextLedBloc?.dispatch(new LedEvents.Toggle())\n      }\n    } else if (event instanceof LedEvents.TurnOff) {\n      yield new LedStates.Off()\n    }\n  }\n}\n","import { setupBlocs } from '@bloc-arch/react'\nimport { LedBloc } from './led'\n\nexport const { BlocProvider, useBloc, useWeakBloc } = setupBlocs({\n  led0: (nextLedBloc: LedBloc) => new LedBloc('0', nextLedBloc),\n  led1: (nextLedBloc: LedBloc) => new LedBloc('1', nextLedBloc),\n  led2: (nextLedBloc: LedBloc) => new LedBloc('2', nextLedBloc),\n  led3: () => new LedBloc('3'),\n})\n","import { BlocBuilder, useBlocRenderProp } from '@bloc-arch/react'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { LedBloc, LedEvents, LedStates } from '../blocs/led'\n\nexport function Led(props: { ledBloc: LedBloc }) {\n  return (\n    <div\n      onClick={() => {\n        props.ledBloc.dispatch(new LedEvents.Toggle())\n      }}\n    >\n      <BlocBuilder\n        bloc={props.ledBloc}\n        renderer={useBlocRenderProp(\n          (state) => {\n            if (state instanceof LedStates.On) {\n              return (\n                <>\n                  <Container isOn={true} />\n                  <Label>{props.ledBloc.label}</Label>\n                </>\n              )\n            } else if (state instanceof LedStates.Off) {\n              return (\n                <>\n                  <Container isOn={false} />\n                  <Label>{props.ledBloc.label}</Label>\n                </>\n              )\n            }\n            return <Container isOn={false} />\n          },\n          [props.ledBloc]\n        )}\n      />\n    </div>\n  )\n}\n\nconst Container = styled.div<{ isOn: boolean }>`\n  width: 2rem;\n  height: 2rem;\n  background: ${({ isOn }) =>\n    isOn\n      ? 'radial-gradient(rgba(255, 128, 128, 1.0) 10%, rgba(255, 32, 32, 1.0) 75%)'\n      : 'radial-gradient(rgba(64, 10, 10, 1.0), rgba(150, 0, 0, 0.75))'};\n  border-radius: 50%;\n  margin: 0.5rem;\n  cursor: pointer;\n`\n\nconst Label = styled.div`\n  color: gray;\n  font-weight: bold;\n  text-align: center;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { LedEvents } from '../blocs/led'\nimport { useWeakBloc } from '../blocs/setup-blocs'\n\nexport function LedClock() {\n  const ledBloc0Getter = useWeakBloc('led0')\n  const ledBloc1Getter = useWeakBloc('led1')\n  const ledBloc2Getter = useWeakBloc('led2')\n  const ledBloc3Getter = useWeakBloc('led3')\n\n  return (\n    <Button\n      onClick={() => {\n        ;[\n          ledBloc0Getter,\n          ledBloc1Getter,\n          ledBloc2Getter,\n          ledBloc3Getter,\n        ].forEach((ledBlocGetter) => {\n          ledBlocGetter()?.dispatch(new LedEvents.TurnOff())\n        })\n      }}\n    >\n      RESET\n    </Button>\n  )\n}\n\nconst Button = styled.div`\n  border: 2px solid orange;\n  color: orange;\n  margin-top: 1rem;\n  padding: 0.5rem 1rem;\n  cursor: pointer;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useBloc } from '../blocs/setup-blocs'\nimport { Led } from '../components/Led'\nimport { LedClock } from '../components/LedClock'\n\nexport function Home() {\n  const ledBloc3 = useBloc('led3')()\n  const ledBloc2 = useBloc('led2')(ledBloc3)\n  const ledBloc1 = useBloc('led1')(ledBloc2)\n  const ledBloc0 = useBloc('led0')(ledBloc1)\n\n  return (\n    <Wrapper>\n      <Title>Click on any diod</Title>\n      <LedWrapper>\n        <Led ledBloc={ledBloc0} />\n        <Led ledBloc={ledBloc1} />\n        <Led ledBloc={ledBloc2} />\n        <Led ledBloc={ledBloc3} />\n      </LedWrapper>\n      <LedWrapper>\n        <Led ledBloc={ledBloc3} />\n        <Led ledBloc={ledBloc2} />\n        <Led ledBloc={ledBloc1} />\n        <Led ledBloc={ledBloc0} />\n      </LedWrapper>\n      <LedClock />\n    </Wrapper>\n  )\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nconst Title = styled.h1`\n  color: black;\n`\n\nconst LedWrapper = styled.div`\n  display: flex;\n  margin-bottom: 1rem;\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BlocProvider } from './blocs/setup-blocs'\nimport './index.css'\nimport { Home } from './screens/Home'\n\n// Bloc.logger = console\n\nReactDOM.render(\n  <React.StrictMode>\n    <BlocProvider>\n      <Home />\n    </BlocProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}